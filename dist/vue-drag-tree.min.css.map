{"version":3,"sources":["webpack:///./src/DragNode.vue"],"names":[],"mappings":"AA2LA,eACA,mBAOA,oDACA,mBAGA,MACA,eAGA,MACA,gBAGA,MACA,eAGA,cACA,YACA,sBACA,mEACA,eACA,cACA,iCACA,yCAGA,YACA,WACA,cAGA,oBACA,qBACA,UACA,WACA,gBACA,iBAGA,oBACA,qBACA,QACA,SACA,iBACA,iBACA,2BACA,iCACA,oCACA,0BACA,qCAGA,aACA","file":"vue-drag-tree.min.css","sourcesContent":["<template>\r\n  <div :style='styleObj' :draggable='isDraggable' @drag.stop='drag' @dragstart.stop='dragStart' @dragover.stop='dragOver' @dragenter.stop='dragEnter' @dragleave.stop='dragLeave' @drop.stop='drop' @dragend.stop='dragEnd' class='dnd-container'>\r\n    <div :class='{\"is-clicked\": isClicked,\"is-hover\":isHover}' @click=\"toggle\" @mouseover='mouseOver' @mouseout='mouseOut' @dblclick=\"changeType\">\r\n      <div :style=\"{ 'padding-left': (this.depth - 1) * 1.5 + 'rem' }\" :id='model.id' class='treeNodeText'>\r\n        <span :class=\"[isClicked ? 'nodeClicked' : '',isFolder ? 'vue-drag-node-icon' : 'vue-drag-file-icon']\"></span>\r\n        <span class='text'>{{model.name}}</span>\r\n      </div>\r\n    </div>\r\n    <div class='treeMargin' v-show=\"open\" v-if=\"isFolder\">\r\n      <item v-for=\"item2 in model.children\" :allowDrag='allowDrag' :allowDrop='allowDrop' :depth='increaseDepth' :model=\"item2\" :key='item2.id' :defaultText='defaultText'>\r\n      </item>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nlet id = 1000\r\nlet fromData = null\r\nlet toData = null\r\nlet nodeClicked = undefined // Attention: 递归的所有组件共享同一个＂顶级作用域＂（这个词或许不太正确，但就这个意思）．即：共享上面这几个let变量．这为实现当前节点的高亮提供了基础．\r\nlet rootTree = null // vue-drag-tree组件引用\r\n\r\nimport { findRoot, exchangeData } from './util'\r\nexport default {\r\n  name: 'DragNode',\r\n  data() {\r\n    return {\r\n      open: false,\r\n      isClicked: false, // 当前节点被点击\r\n      isHover: false, // 当前节点被hvoer\r\n      styleObj: {\r\n        opacity: 1\r\n      }\r\n    }\r\n  },\r\n  props: {\r\n    model: Object,\r\n    allowDrag: {\r\n      type: Function,\r\n      default: () => true\r\n    },\r\n    allowDrop: {\r\n      type: Function,\r\n      default: () => true\r\n    },\r\n    defaultText: {\r\n      // 填加节点时显示的默认文本．\r\n      type: String,\r\n      default: '新增节点'\r\n    },\r\n    depth: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  computed: {\r\n    isFolder() {\r\n      return this.model.children && this.model.children.length\r\n    },\r\n    increaseDepth() {\r\n      return this.depth + 1\r\n    },\r\n    isDraggable() {\r\n      return this.allowDrag(this.model, this)\r\n    }\r\n  },\r\n  methods: {\r\n    toggle() {\r\n      if (this.isFolder) {\r\n        this.open = !this.open\r\n      }\r\n      // 调用vue-drag-tree的父组件中的方法,以传递出当前被点击的节点的id值\r\n      //　API: 对外开放的当前被点击节点的信息\r\n      rootTree.emitCurNodeClicked(this.model, this)\r\n\r\n      // 纪录节点被点击的状态\r\n      this.isClicked = !this.isClicked\r\n\r\n      // 用户需要节点高亮\r\n      // 第一次点击当前节点．当前节点高亮，遍历重置其他节点的样式\r\n      if (nodeClicked != this.model.id) {\r\n        let treeParent = rootTree.$parent\r\n\r\n        // 遍历重置所有树组件的高亮样式\r\n        let nodeStack = [treeParent.$children[0]]\r\n        while (nodeStack.length != 0) {\r\n          let item = nodeStack.shift()\r\n          item.isClicked = false\r\n          if (item.$children && item.$children.length > 0) {\r\n            nodeStack = nodeStack.concat(item.$children)\r\n          }\r\n        }\r\n        // 然后把当前节点的样式设置为高亮\r\n        this.isClicked = true\r\n\r\n        // 设置节点为 当前节点\r\n        nodeClicked = this.model.id\r\n      }\r\n    },\r\n\r\n    changeType() {\r\n      // 用户需要高亮-->才纪录当前被点击节点\r\n      if (this.currentHighlight) {\r\n        nodeClicked = this.model.id\r\n      }\r\n      if (!this.isFolder) {\r\n        this.$set(this.model, 'children', [])\r\n        this.addChild()\r\n        this.open = true\r\n        this.isClicked = true\r\n      }\r\n    },\r\n    mouseOver(e) {\r\n      this.isHover = true\r\n    },\r\n    mouseOut(e) {\r\n      this.isHover = false\r\n    },\r\n    addChild() {\r\n      this.model.children.push({\r\n        name: this.defaultText,\r\n        id: id++\r\n      })\r\n    },\r\n    removeChild(id) {\r\n      // 获取父组件的model.children\r\n      let parent_model_children = this.$parent.model.children\r\n\r\n      // 在父组件model.children里删除\r\n      for (let index in parent_model_children) {\r\n        // 找到该删的id\r\n        if (parent_model_children[index].id == id) {\r\n          parent_model_children = parent_model_children.splice(index, 1)\r\n          break\r\n        }\r\n      }\r\n    },\r\n    drag(e) {\r\n      fromData = this\r\n      rootTree.emitDrag(this.model, this, e)\r\n    },\r\n    dragStart(e) {\r\n      e.dataTransfer.effectAllowed = 'move'\r\n      e.dataTransfer.setData('text/plain', 'asdad')\r\n      return true\r\n    },\r\n    dragOver(e) {\r\n      e.preventDefault()\r\n      rootTree.emitDragOver(this.model, this, e)\r\n      return true\r\n    },\r\n    dragEnter(e) {\r\n      if (this._uid !== fromData._uid) {\r\n        this.styleObj.opacity = 0.5\r\n      }\r\n      rootTree.emitDragEnter(this.model, this, e)\r\n    },\r\n    dragLeave(e) {\r\n      this.styleObj.opacity = 1\r\n      rootTree.emitDragLeave(this.model, this, e)\r\n    },\r\n    drop(e) {\r\n      e.preventDefault()\r\n      this.styleObj.opacity = 1\r\n      // 如果判断当前节点不允许被drop，return;\r\n      if (!this.allowDrop(this.model, this)) {\r\n        return\r\n      }\r\n      toData = this\r\n      exchangeData(rootTree, fromData, toData)\r\n      rootTree.emitDrop(this.model, this, e)\r\n    },\r\n    dragEnd(e) {\r\n      rootTree.emitDragEnd(this.model, this, e)\r\n      return\r\n    }\r\n  },\r\n  beforeCreate() {\r\n    this.$options.components.item = require('./DragNode.vue')\r\n  },\r\n  created() {\r\n    rootTree = findRoot(this)\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.dnd-container {\r\n  background: #f3f3f3;\r\n}\r\n\r\n.dnd-container .is-clicked {\r\n  background: #e5e9f2;\r\n}\r\n\r\n.dnd-container .is-hover {\r\n  background: #e5e9f2;\r\n}\r\n\r\n.item {\r\n  cursor: pointer;\r\n}\r\n\r\n.bold {\r\n  font-weight: bold;\r\n}\r\n\r\n.text {\r\n  font-size: 12px;\r\n}\r\n\r\n.treeNodeText {\r\n  height: 28px;\r\n  box-sizing: border-box;\r\n  width: fit-content;\r\n  font-size: 18px;\r\n  color: #324057;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.changeTree {\r\n  width: 1rem;\r\n  color: #324057;\r\n}\r\n\r\n.vue-drag-file-icon {\r\n  display: inline-block;\r\n  width: 4px;\r\n  height: 4px;\r\n  margin-left: 4px;\r\n  margin-right: 4px;\r\n}\r\n\r\n.vue-drag-node-icon {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  margin-left: 10px;\r\n  margin-right: 8px;\r\n  border-left: 4px solid grey;\r\n  border-top: 4px solid transparent;\r\n  border-bottom: 4px solid transparent;\r\n  border-right: 0 solid yellow;\r\n  transition: transform 0.3s ease-in-out;\r\n}\r\n\r\n.nodeClicked {\r\n  transform: rotate(90deg);\r\n}\r\n</style>\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/DragNode.vue?7b801ecd"],"sourceRoot":""}